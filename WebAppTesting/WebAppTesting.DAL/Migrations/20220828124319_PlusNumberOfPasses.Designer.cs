// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAppTesting.DAL;

namespace WebAppTesting.DAL.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20220828124319_PlusNumberOfPasses")]
    partial class PlusNumberOfPasses
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("WebAppTesting.Domain.Entity.Answers", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isTrue")
                        .HasColumnType("bit");

                    b.Property<int>("testID")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("testID");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("WebAppTesting.Domain.Entity.Grades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("WebAppTesting.Domain.Entity.Profile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Age")
                        .HasColumnType("tinyint");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("WebAppTesting.Domain.Entity.Subjects", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("WebAppTesting.Domain.Entity.Testing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GradeID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfPasses")
                        .HasColumnType("int");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GradeID");

                    b.HasIndex("SubjectID");

                    b.HasIndex("UserId");

                    b.ToTable("Testing");
                });

            modelBuilder.Entity("WebAppTesting.Domain.Entity.Tests", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ques")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("testingID")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("testingID");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("WebAppTesting.Domain.Entity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "xl4tir",
                            Password = "16079cf6877ceb45aea98ab7d4745e3076fc8c31288ca407d2529b99cf6d0db2",
                            Role = 1
                        });
                });

            modelBuilder.Entity("WebAppTesting.Domain.Entity.Answers", b =>
                {
                    b.HasOne("WebAppTesting.Domain.Entity.Tests", "Test")
                        .WithMany("Answers")
                        .HasForeignKey("testID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("WebAppTesting.Domain.Entity.Profile", b =>
                {
                    b.HasOne("WebAppTesting.Domain.Entity.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("WebAppTesting.Domain.Entity.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAppTesting.Domain.Entity.Testing", b =>
                {
                    b.HasOne("WebAppTesting.Domain.Entity.Grades", "Grade")
                        .WithMany("Testings")
                        .HasForeignKey("GradeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAppTesting.Domain.Entity.Subjects", "Subject")
                        .WithMany("Testings")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAppTesting.Domain.Entity.User", "User")
                        .WithMany("Testing")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAppTesting.Domain.Entity.Tests", b =>
                {
                    b.HasOne("WebAppTesting.Domain.Entity.Testing", "Testing")
                        .WithMany("Tests")
                        .HasForeignKey("testingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Testing");
                });

            modelBuilder.Entity("WebAppTesting.Domain.Entity.Grades", b =>
                {
                    b.Navigation("Testings");
                });

            modelBuilder.Entity("WebAppTesting.Domain.Entity.Subjects", b =>
                {
                    b.Navigation("Testings");
                });

            modelBuilder.Entity("WebAppTesting.Domain.Entity.Testing", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("WebAppTesting.Domain.Entity.Tests", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("WebAppTesting.Domain.Entity.User", b =>
                {
                    b.Navigation("Profile");

                    b.Navigation("Testing");
                });
#pragma warning restore 612, 618
        }
    }
}
